#include <ESP8266WiFi.h>    
#include "ThingSpeak.h"

WiFiServer server(80);


#define trigPin 4 //הפין טריג (trig) של החיישן האולטרסוני
#define echoPin 5 // הפין אקו (Echo) של החיישן האולטרסוני

float duration; // variable for the duration of sound wave travel
float mm; // variable for the distance measurement

float measurements[] = {};


const char* ssid = "home";   // your network SSID (name) 
const char* password = "10203040";   // your network password
const float zeroing = 146.71;        /*  כאן מדביקים את המספר שהחיישן מודד כגובה המיכל הריק   */

WiFiClient client;

unsigned long myChannelNumber = 1788567;
const char * myWriteAPIKey = "RWLA49QFD0JERSJJ";

void setup() {
  Serial.begin(115200);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  WiFi.mode(WIFI_STA);   
  ThingSpeak.begin(client);  // Initialize ThingSpeak

}

void loop() {
  Serial.println(" "); 
  WiFi.begin(ssid, password);
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect");
    while(WiFi.status() != WL_CONNECTED){  
      delay(1000);     
      Serial.print("."); 
    } 
   Serial.println(" "); 
   Serial.println("\nConnected.");
  }
  for (int count = 0; count < 10; count++) {
    digitalWrite(trigPin, LOW);
    delay(500);         
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);

    mm = (duration * 0.034 / 2) * 10; // Speed of sound wave divided by 2 (go and back)
    measurements[count] = mm;
  }

  float sendvalue =  zeroing - calculateavrage(10);       /*  איפוס המדידה = הפחתת הערך הנמדד מהערך שמתאר את האפס, ובכך נקבל את הגובה האמיתי של הנוזל */
  if (sendvalue < 0) sendvalue = 0;                     /* אם משום מה המדידה יצאה נמוכה מאפס, תשווה לאפס (כי אין מינוס משקעים) */
  
  int x = ThingSpeak.writeField(myChannelNumber, 1, sendvalue, myWriteAPIKey);
   if(x == 200){
    Serial.println("Channel update successful.");
    Serial.println("Uploaded" + String(sendvalue,2));     /*  תדפיס את הערך שהעלת לthingspeak */

  } else {
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
}

float calculatefrequent(float a[], int size) {
  int most = 0;     /*- כמות הפעמים שמופיע המספר שחוזר על עצמו הכי הרבה פעמים -*/
  float mostnum = 0;       /*- המספר שחוזר על עצמו הכי הרבה פעמים -*/
  float currentnum = 0;       /*- המספר שהפונקציה "חוקרת" כרגע  -*/ 
  for (int i=0; i <size; i++) {        /*- עבור כל i  -*/
      delay(200);             
      currentnum=a[i];             /*- המספר שנחקר כרגע הוא הi במערך -*/
      Serial.print(i+1);
      Serial.print(": ");
      Serial.println(currentnum);
      int count = 0;                 /*- משתנה שסופר כמה פעמים הוא מופיע -*/
      for (int j=0;j <size; j++) {          /*- עבור כל j -*/
        if ( a[i] != mostnum) {                  /*- אם אנו חוקרים מספר שונה מהגבוה ביותר -*/
          if (currentnum == a[j]) count += 1;            /*- אז אם המספר הנחקר שווה לזה שמופיע במערך במיקום j ספור +1 -*/   
        }
      }
      if (count > most) {                     /*- אם המספר הנחקר מופיע יותר פעמים מקודמיו -*/
        most = count;                         /*- אז זו כמות הפעמים שהמספר החדש מופיע -*/
        mostnum = a[i];                      /*- וזה המספר החדש -*/
      }
  }
  Serial.print("Most Frequent: ");            /*- אחרי שנעשה את זה עשר פעמים -*/
  Serial.println(mostnum);  /*- המספר שמופיע הכי הרבה פעמים נמצא במשתנה הזה -*/
  return mostnum;
}

float calculateavrage(int size) {
  float avrge;
  for (int i=0; i <size; i++) {        /*- עבור כל i  -*/
      float val = calculatefrequent(measurements,10);
      avrge+=val;             
  }
  float av = avrge / size;
  Serial.print("Avrage: ");            
  Serial.println(av);  
  return av;
}
